// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Node{
    int isObstacle;
    float3 position;

    int gridX;
    int gridY;

    int gCost;
    int hCost;
    int fCost;

    int parentX;
    int parentY;
};

RWStructuredBuffer<Node> grid;
RWStructuredBuffer<Node> openSet; //length is 100
int openSetCount = 0;
RWStructuredBuffer<Node> closeSet; // length is 100
int closeSetCount = 0;

float gridSize;

Node startNode;
Node endNode;

void removeFromOpenSet(Node node){
    bool shiftingEnabled = false;
    for(int i = 0; i < 99; i++){
        if((node.gridX == openSet[i].gridX) && (node.gridY == openSet[i].gridY)){
            shiftingEnabled = true;
            openSetCount--;
        }
        if(shiftingEnabled){
            openSet[i] = openSet[i + 1];
        }
    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Node node = grid[id.x];
    //node.isObstacle = node.isObstacle == 1 ? 0 : 1;
    //grid[id.x] = node;
    
    /*for(int i = 0; i < 20; i++){
        for(int j = 0; j < 20; j++){
            grid[i*20 + j].isObstacle = i*j; 
        }
    }*/
    openSet[openSetCount] = startNode;
    openSetCount++;

    while(openSetCount > 0){
        Node currentNode = openSet[0];

        for(int i = 1; i < openSetCount; i++){
            int openSetFCost = openSet[i].gCost + openSet[i].hCost;
            int currentNodeFCost = currentNode.gCost + currentNode.hCost;
            if(openSetFCost < currentNodeFCost || openSetFCost == currentNodeFCost && openSet[i].hCost < currentNode.hCost){
                currentNode = openSet[i];
            }
        }

        //remove from openset currentnode
        removeFromOpenSet(currentNode);
        closeSet[closeSetCount] = currentNode;
        closeSetCount++;

        if((currentNode.gridX == endNode.gridX) && (currentNode.gridY == endNode.gridY)){
            return;
        }


    }



}
//setleri buffer ile at-çek
//koordinatlara göre empty kontrolü yap
//ad yerine set[++i] kullan hem count say hem de değer at
//neighbour fonksiypnuna gerek yok döngü içi kontrol yazman yeterli
//path i ya cpu da çekya da bi set daha at

